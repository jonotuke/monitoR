---
title: "Analysis of skink dataset"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Analysis of skink dataset}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
library(monitoR)
pacman::p_load(conflicted, tidyverse, gt)
theme_set(theme_bw())
```

# Data
```{r}
data(skink)
```

```{r}
skink |> glimpse()
```

# Processing
First we add a 4x4 grid

```{r}
grid <- create_grid(range(skink$X), range(skink$Y), dim = c(4,4))
skink_grid <- skink |> add_grid(grid)
```


```{r}
#| fig-cap: Skink dataset with grid
#| label: fig-skink
plot_grid(grid, skink_grid)
```

# Index measures

## Entropy
First we look at the entropy of observation for the data given in @fig-skink. 

```{r}
calc_entropy(skink_grid$grid)
```

**Q1: Is it evenly spread?**
We know that the entopy for evenly spread data over a 4x4 grid using $\log_{10}$ is

$$
\log_{10}(16)
$$


```{r}
log10(16)
```

In our case, we have `r calc_entropy(skink_grid$grid)` which is smaller indicating non-even spread. We may wonder if this is significant? 

To test this, we will create a empirical null distribution based on simulating data with equal spread of grids


```{r}
null_entropy <- monitoR::get_entropy_null(skink_grid$grid, n_sims = 1000, n_grid = 16)
```

If we look at the 95% percentiles

```{r}
quantile(null_entropy, c(0.025, 0.975))
```

we see that it does not contain the observed value, so the observations are not evenly spread. 

**Entropy and behaviour**

Next, we will calculate the entropy for each behaviour (@fig-BE). In this we see a difference in entropy for different behaviours. For example, the most evenly spread is movement, while foraging is the least spread. 

```{r}
#| fig-cap: Entropy for each behaviour
#| label: fig-BE
skink_grid |> 
  summarise(entropy = calc_entropy(grid), .by = behaviour) |> 
  mutate(
    behaviour = fct_reorder(behaviour, entropy)
  ) |> 
  ggplot(aes(entropy, behaviour, fill = behaviour)) + 
  geom_col(show.legend = FALSE) + 
  harrypotter::scale_fill_hp_d("Ravenclaw") + 
  labs(x = "Entropy", y = NULL)
```


To assess the difference between the entropy for the different behaviours, we will used the squared distance of each entropy from the overall entropy

$$
ESS = \sum^k_{i = 1} (E_i - E_{\bullet})^2, 
$$

where $E_i$ is the entropy for the $i$th behaviour, and $E_{\bullet}$ is the entropy for all observations. 

For @fig-BE, we have

```{r}
get_ess(skink_grid)
```

As before, the question is 

> Is this significant?

To access this, we will use a permutation test, so we will

- Permute the grid recorded in the data
- Calculate ESS each time

```{r}
ess_null <- get_ess_null(skink_grid, n_sims = 100)
quantile(ess_null, c(0.025, 0.975))
```

So this time we find that the observed ESS is within the 95% empirical confidence interval and so is not surprising. 

# Environment effects
So, we will now focus on Basking (@fig-basking). We will assume for illustration that there are rocks in Grid 5, 6, 7, 8, 2, and 3. 

We want to ask the question of

> Is it more likely to bask where there are rocks?

```{r}
skink_bask <- skink_grid |> 
  filter(behaviour == "Basking")
```

```{r}
#| fig-cap: Observations where just basking
#| label: fig-basking
plot_grid(grid, skink_bask)
```

@tbl-bask gives the number of times that the skink is seen basking in each grid. As well, we have given the type of environment. 

```{r}
#| tbl-cap: Count of number of basking events for each grid. 
#| label: tbl-bask
basking_df <- count_grid_behaviour(grid = grid, skink_bask) 
basking_df <- basking_df |> 
  mutate(
    environ = "normal"
  )
basking_df$environ[c(2, 3, 5, 6, 7, 8)] <- "rocks"
basking_df |> gt()
```

We can fit a linear model of number of observations on environ, but we would also like to take into account the spatial dependency, that is, you will might be more likely to bask in grid next to one another. @fig-neigh show the neighbourhood of a corner grid, edge grid and a middle grid. 


```{r}
#| fig-cap: Neighbourhoods. 
#| label: fig-neigh 
#| layout-ncol: 3
plot_neigh(grid, 1)
plot_neigh(grid, 2)
plot_neigh(grid, 10)
```

First we add the neigh mean. 
```{r}
M <- get_neigh_mat(grid)
basking_df$neigh <- as.numeric(M %*% basking_df$obs)
basking_df
```

And then fit some models

```{r}
M1 <- lm(obs ~ environ * neigh, data = basking_df)
summary(M1)
M2 <- update(M1, .~. - environ:neigh)
summary(M2)
M3 <- update(M2, .~. - neigh)
summary(M3)
```

So it looks like there is no dependency. 