
R version 4.4.0 (2024-04-24) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "monitoR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('monitoR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("add_grid")
> ### * add_grid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_grid
> ### Title: Add grid
> ### Aliases: add_grid
> 
> ### ** Examples
> 
> pacman::p_load(tidyverse, targets)
> data(skink)
> grid44 <- create_grid(range(skink$X), range(skink$Y), dim = c(4,4))
> grid44
# A tibble: 16 × 8
    grid     X     Y  left right bottom   top  zone
   <dbl> <int> <int> <dbl> <dbl>  <dbl> <dbl> <dbl>
 1     1     1     1  33    98.5    94   171.     1
 2     2     2     1  98.5 164      94   171.     1
 3     3     3     1 164   230.     94   171.     1
 4     4     4     1 230.  295      94   171.     1
 5     5     1     2  33    98.5   171.  248.     1
 6     6     2     2  98.5 164     171.  248.     1
 7     7     3     2 164   230.    171.  248.     1
 8     8     4     2 230.  295     171.  248.     1
 9     9     1     3  33    98.5   248.  324.     1
10    10     2     3  98.5 164     248.  324.     1
11    11     3     3 164   230.    248.  324.     1
12    12     4     3 230.  295     248.  324.     1
13    13     1     4  33    98.5   324.  401      1
14    14     2     4  98.5 164     324.  401      1
15    15     3     4 164   230.    324.  401      1
16    16     4     4 230.  295     324.  401      1
> 
> add_grid(skink, grid44)
# A tibble: 6,728 × 6
   time                    X     Y behaviour             grid  zone
   <dttm>              <dbl> <dbl> <chr>                <dbl> <dbl>
 1 2024-03-25 14:34:01   229   213 Basking                  7     1
 2 2024-03-25 14:35:01   248   200 Basking                  8     1
 3 2024-03-25 14:36:01   235   221 Basking                  8     1
 4 2024-03-25 14:37:01   250   207 Movement                 8     1
 5 2024-03-25 14:38:01   252   214 Basking                  8     1
 6 2024-03-25 14:39:01   248   215 Basking                  8     1
 7 2024-03-25 14:40:01   255   275 Basking                 12     1
 8 2024-03-25 14:41:01   256   283 Out Of Sight/ Hiding    12     1
 9 2024-03-25 14:42:01   190   370 Out Of Sight/ Hiding    15     1
10 2024-03-25 14:47:01   141   401 Out Of Sight/ Hiding    14     1
# ℹ 6,718 more rows
> 
> 
> 
> cleanEx()

detaching ‘package:targets’, ‘package:lubridate’, ‘package:forcats’,
  ‘package:stringr’, ‘package:dplyr’, ‘package:purrr’, ‘package:readr’,
  ‘package:tidyr’, ‘package:tibble’, ‘package:ggplot2’,
  ‘package:tidyverse’

> nameEx("add_neigh_mean")
> ### * add_neigh_mean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: add_neigh_mean
> ### Title: add_neigh_mean
> ### Aliases: add_neigh_mean
> 
> ### ** Examples
> 
> grid_example <- grid
> count_grid_behaviour(grid_example, skink_grid) |> 
+ dplyr::mutate(
+  neigh_mean = add_neigh_mean(obs, grid_example)
+ )
# A tibble: 16 × 3
    grid   obs neigh_mean
   <dbl> <dbl>      <dbl>
 1     1    51      791  
 2     2   917     1028. 
 3     3  1077      937. 
 4     4    13     1309. 
 5     5   551      399. 
 6     6   905      679. 
 7     7  2554      440. 
 8     8   295      774. 
 9     9    37      311. 
10    10    86      528. 
11    11   156      491. 
12    12    68      602. 
13    13     0       45  
14    14    12       57  
15    15     6       64.4
16    16     0       76.7
> 
> 
> 
> cleanEx()
> nameEx("calc_ei")
> ### * calc_ei
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_ei
> ### Title: calc ei
> ### Aliases: calc_ei
> 
> ### ** Examples
> 
> zo1 <- tibble::tibble(
+   zone = 1:2,
+   obs = c(0, 100),
+   n_grids = rep(1,2)
+ )
> zo2 <- tibble::tibble(
+   zone = 1:2,
+   obs = c(50,50),
+   n_grids = rep(1,2)
+ )
> calc_ei(zo1)
# A tibble: 2 × 8
   zone   obs n_grids    ri    pi ratio    wi     ei
  <int> <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>
1     1     0       1     0   0.5     0     0 -1    
2     2   100       1     1   0.5     2     1  0.333
> calc_ei(zo2)
# A tibble: 2 × 8
   zone   obs n_grids    ri    pi ratio    wi    ei
  <int> <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>
1     1    50       1   0.5   0.5     1   0.5     0
2     2    50       1   0.5   0.5     1   0.5     0
> 
> 
> 
> cleanEx()
> nameEx("calc_entropy")
> ### * calc_entropy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_entropy
> ### Title: calculate entropy
> ### Aliases: calc_entropy
> 
> ### ** Examples
> 
> calc_entropy(sample(1:16, size = 1000, replace = TRUE)) |> print()
[1] 1.201666
> 
> 
> 
> cleanEx()
> nameEx("calc_spi")
> ### * calc_spi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calc_spi
> ### Title: calculate SPI
> ### Aliases: calc_spi
> 
> ### ** Examples
> 
> data(skink_grid)
> data(grid)
> grid$zone[1:2] <- 2
> grid
# A tibble: 16 × 8
    grid     X     Y  left right bottom   top  zone
   <dbl> <int> <int> <dbl> <dbl>  <dbl> <dbl> <dbl>
 1     1     1     1  33    98.5    94   171.     2
 2     2     2     1  98.5 164      94   171.     2
 3     3     3     1 164   230.     94   171.     1
 4     4     4     1 230.  295      94   171.     1
 5     5     1     2  33    98.5   171.  248.     1
 6     6     2     2  98.5 164     171.  248.     1
 7     7     3     2 164   230.    171.  248.     1
 8     8     4     2 230.  295     171.  248.     1
 9     9     1     3  33    98.5   248.  324.     1
10    10     2     3  98.5 164     248.  324.     1
11    11     3     3 164   230.    248.  324.     1
12    12     4     3 230.  295     248.  324.     1
13    13     1     4  33    98.5   324.  401      1
14    14     2     4  98.5 164     324.  401      1
15    15     3     4 164   230.    324.  401      1
16    16     4     4 230.  295     324.  401      1
> get_zone_object(grid, skink_grid) |> calc_spi()
[1] 0.02157296
> 
> 
> 
> cleanEx()
> nameEx("count_grid_behaviour")
> ### * count_grid_behaviour
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: count_grid_behaviour
> ### Title: count_grid behaviour
> ### Aliases: count_grid_behaviour
> 
> ### ** Examples
> 
> count_grid_behaviour(grid, skink_grid)
# A tibble: 16 × 2
    grid   obs
   <dbl> <dbl>
 1     1    51
 2     2   917
 3     3  1077
 4     4    13
 5     5   551
 6     6   905
 7     7  2554
 8     8   295
 9     9    37
10    10    86
11    11   156
12    12    68
13    13     0
14    14    12
15    15     6
16    16     0
> 
> 
> 
> cleanEx()
> nameEx("create_grid")
> ### * create_grid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_grid
> ### Title: create_grid
> ### Aliases: create_grid
> 
> ### ** Examples
> 
> data(skink)
> zone = tibble::tibble(
+   grid = 1:16,
+   zone = rep(1:2, c(10, 6))
+ )
> create_grid(
+   range(skink$X),
+   range(skink$Y),
+   dim = c(4,4),
+   zone
+ )
# A tibble: 16 × 8
    grid     X     Y  left right bottom   top  zone
   <dbl> <int> <int> <dbl> <dbl>  <dbl> <dbl> <int>
 1     1     1     1  33    98.5    94   171.     1
 2     2     2     1  98.5 164      94   171.     1
 3     3     3     1 164   230.     94   171.     1
 4     4     4     1 230.  295      94   171.     1
 5     5     1     2  33    98.5   171.  248.     1
 6     6     2     2  98.5 164     171.  248.     1
 7     7     3     2 164   230.    171.  248.     1
 8     8     4     2 230.  295     171.  248.     1
 9     9     1     3  33    98.5   248.  324.     1
10    10     2     3  98.5 164     248.  324.     1
11    11     3     3 164   230.    248.  324.     2
12    12     4     3 230.  295     248.  324.     2
13    13     1     4  33    98.5   324.  401      2
14    14     2     4  98.5 164     324.  401      2
15    15     3     4 164   230.    324.  401      2
16    16     4     4 230.  295     324.  401      2
> 
> 
> 
> cleanEx()
> nameEx("get_entropy_null")
> ### * get_entropy_null
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_entropy_null
> ### Title: get_entropy_null
> ### Aliases: get_entropy_null
> 
> ### ** Examples
> 
> get_entropy_null(1:16, n_sims = 10, n_grid = 16)
 [1] 1.0159762 0.8370558 0.8604818 0.8086503 1.0017735 0.9641447 0.9123133
 [8] 1.0017735 0.9407187 1.0017735
> 
> 
> 
> cleanEx()
> nameEx("get_ess")
> ### * get_ess
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_ess
> ### Title: get ESS
> ### Aliases: get_ess
> 
> ### ** Examples
> 
> get_ess(skink_grid)
[1] 0.4849358
> 
> 
> 
> cleanEx()
> nameEx("get_ess_null")
> ### * get_ess_null
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_ess_null
> ### Title: get ess null
> ### Aliases: get_ess_null
> 
> ### ** Examples
> 
> get_ess_null(skink_grid)
[1] 0.1986353 0.1708702 0.1011975 0.4123219 0.5496235
> 
> 
> 
> cleanEx()
> nameEx("get_neigh")
> ### * get_neigh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_neigh
> ### Title: get neigh
> ### Aliases: get_neigh
> 
> ### ** Examples
> 
> get_neigh(grid, 1)
[1] 2 5 6
> 
> 
> 
> cleanEx()
> nameEx("get_neigh_mat")
> ### * get_neigh_mat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_neigh_mat
> ### Title: get_neigh_mat
> ### Aliases: get_neigh_mat
> 
> ### ** Examples
> 
> get_neigh_mat(grid)
       [,1]      [,2]      [,3]  [,4]      [,5]      [,6]      [,7]      [,8]
 [1,] 0.000 0.3333333 0.0000000 0.000 0.3333333 0.3333333 0.0000000 0.0000000
 [2,] 0.200 0.0000000 0.2000000 0.000 0.2000000 0.2000000 0.2000000 0.0000000
 [3,] 0.000 0.2000000 0.0000000 0.200 0.0000000 0.2000000 0.2000000 0.2000000
 [4,] 0.000 0.0000000 0.3333333 0.000 0.0000000 0.0000000 0.3333333 0.3333333
 [5,] 0.200 0.2000000 0.0000000 0.000 0.0000000 0.2000000 0.0000000 0.0000000
 [6,] 0.125 0.1250000 0.1250000 0.000 0.1250000 0.0000000 0.1250000 0.0000000
 [7,] 0.000 0.1250000 0.1250000 0.125 0.0000000 0.1250000 0.0000000 0.1250000
 [8,] 0.000 0.0000000 0.2000000 0.200 0.0000000 0.0000000 0.2000000 0.0000000
 [9,] 0.000 0.0000000 0.0000000 0.000 0.2000000 0.2000000 0.0000000 0.0000000
[10,] 0.000 0.0000000 0.0000000 0.000 0.1250000 0.1250000 0.1250000 0.0000000
[11,] 0.000 0.0000000 0.0000000 0.000 0.0000000 0.1250000 0.1250000 0.1250000
[12,] 0.000 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.2000000 0.2000000
[13,] 0.000 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.0000000 0.0000000
[14,] 0.000 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.0000000 0.0000000
[15,] 0.000 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.0000000 0.0000000
[16,] 0.000 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.0000000 0.0000000
           [,9]     [,10]     [,11]     [,12] [,13]     [,14]     [,15] [,16]
 [1,] 0.0000000 0.0000000 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.000
 [2,] 0.0000000 0.0000000 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.000
 [3,] 0.0000000 0.0000000 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.000
 [4,] 0.0000000 0.0000000 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.000
 [5,] 0.2000000 0.2000000 0.0000000 0.0000000 0.000 0.0000000 0.0000000 0.000
 [6,] 0.1250000 0.1250000 0.1250000 0.0000000 0.000 0.0000000 0.0000000 0.000
 [7,] 0.0000000 0.1250000 0.1250000 0.1250000 0.000 0.0000000 0.0000000 0.000
 [8,] 0.0000000 0.0000000 0.2000000 0.2000000 0.000 0.0000000 0.0000000 0.000
 [9,] 0.0000000 0.2000000 0.0000000 0.0000000 0.200 0.2000000 0.0000000 0.000
[10,] 0.1250000 0.0000000 0.1250000 0.0000000 0.125 0.1250000 0.1250000 0.000
[11,] 0.0000000 0.1250000 0.0000000 0.1250000 0.000 0.1250000 0.1250000 0.125
[12,] 0.0000000 0.0000000 0.2000000 0.0000000 0.000 0.0000000 0.2000000 0.200
[13,] 0.3333333 0.3333333 0.0000000 0.0000000 0.000 0.3333333 0.0000000 0.000
[14,] 0.2000000 0.2000000 0.2000000 0.0000000 0.200 0.0000000 0.2000000 0.000
[15,] 0.0000000 0.2000000 0.2000000 0.2000000 0.000 0.2000000 0.0000000 0.200
[16,] 0.0000000 0.0000000 0.3333333 0.3333333 0.000 0.0000000 0.3333333 0.000
> 
> 
> 
> cleanEx()
> nameEx("get_zone_object")
> ### * get_zone_object
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: get_zone_object
> ### Title: get zone object
> ### Aliases: get_zone_object
> 
> ### ** Examples
> 
> data(grid)
> grid$zone[2] <- 2
> data(skink_grid)
> get_zone_object(grid, skink_grid)
# A tibble: 2 × 3
   zone   obs n_grids
  <dbl> <dbl>   <int>
1     1  5811      15
2     2   917       1
> 
> 
> 
> cleanEx()
> nameEx("plot_ei")
> ### * plot_ei
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_ei
> ### Title: plot ei
> ### Aliases: plot_ei
> 
> ### ** Examples
> 
> data(skink_grid)
> data(grid)
> grid$zone[5:8] <- 2
> grid$zone[8:16] <- 3
> plot_ei(grid, skink_grid)
> 
> 
> 
> cleanEx()
> nameEx("plot_grid")
> ### * plot_grid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_grid
> ### Title: plot_grid
> ### Aliases: plot_grid
> 
> ### ** Examples
> 
> data(skink)
> grid <- create_grid(range(skink$X), range(skink$Y), dim = c(4,4))
> grid$zone[1] <- 2
> plot_grid(grid, skink, zone_fill = TRUE)
> 
> 
> 
> cleanEx()
> nameEx("plot_neigh")
> ### * plot_neigh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_neigh
> ### Title: plot_neigh
> ### Aliases: plot_neigh
> 
> ### ** Examples
> 
> plot_neigh(grid, 6)
> 
> 
> 
> cleanEx()
> nameEx("plot_spi")
> ### * plot_spi
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_spi
> ### Title: plot spi
> ### Aliases: plot_spi
> 
> ### ** Examples
> 
> data(grid)
> data(skink_grid)
> grid$zone[1:8] <- 2
> plot_spi(grid, skink_grid)
> 
> 
> 
> cleanEx()
> nameEx("plot_summary")
> ### * plot_summary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot_summary
> ### Title: plot summary
> ### Aliases: plot_summary
> 
> ### ** Examples
> 
> data(skink_grid)
> skink_grid <- skink_grid |>
+   dplyr::mutate(
+     zone = dplyr::case_when(
+       grid %in% c(1, 3, 5) ~ 2,
+       TRUE ~ 1
+     )
+   )
> plot_summary(skink_grid)
> 
> 
> 
> cleanEx()
> nameEx("update_zone")
> ### * update_zone
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: update_zone
> ### Title: Title
> ### Aliases: update_zone
> 
> ### ** Examples
> 
>  grid <- create_grid(
+    c(0, 200),
+    c(0, 100),
+    dim = c(4,4)
+  )
>  df <- tibble::tibble(X = runif(100, 0, 200), Y = runif(100, 0, 100),
+               behaviour = "sitting")
>  plot_grid(grid, df, zone_fill = TRUE)
>  grid <- update_zone(grid, 25, 24, 2)
>  plot_grid(grid, df, zone_fill = TRUE)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.38 0.077 1.507 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
